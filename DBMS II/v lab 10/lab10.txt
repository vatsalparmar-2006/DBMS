--------------------------------(PART-A)--------------------------------


1. Update the age of John's to 31.
--->db.student.updateOne({name:'John'},{$set:{age:31}})

2. Update the city of all students from 'New York' to 'New Jersey'.
--->db.student.updateOne({city:'New York'},{$set:{city:'New Jersey'}})

3. Set isActive to false for every student older than 35.
--->db.student.updateMany({age:{$gt:35}},{$set:{isActive:false}})

4. Increment the age of all students by 1 year.
--->db.student.updateMany({},{$inc:{age:1}})

5. Set the city of 'Eva' to 'Cambridge'.
--->db.student.updateMany({name:'Eva'},{$set:{city:'Cambridge'}})

6. Update 'Sophia's isActive status to false.
--->db.student.updateMany({name:'Sophia'},{$set:{isActive:false}})

7. Update the city field of student aged below 30 to 'San Diego'.
--->db.student.updateMany({age:{$lt:30}},{$set:{city:'San Diego'}})

8. Rename the age field to years for all documents.
--->db.student.updateMany({},{$rename:{age:'years'}})

9. Update 'Nick' to make him active (isActive = true).
--->db.student.updateMany({name:'Nick'},{$set:{isActive : true}})

10. Update all documents to add a new field country with the value 'USA'.
--->db.student.updateMany({},{$set:{country:'USA'}},{upsert:true})

11. Update 'David's city to 'Orlando'.
--->db.student.updateMany({name:'David'},{$set:{city:'Orlando'}})

12. Multiply the age of all students by 2.
--->db.student.updateMany({},{$mul:{age:2}})

13. Unset (remove) the city field for 'Tom'.
--->db.student.updateMany({name:'Tom'},{$unset:{city:''}})

14. Add a new field premiumUser and to true for users older than 30.
--->db.student.updateMany({years:{$gt:30}},{$set:{premiumUser:true}},{upsert:true})

15. Set isActive to true for 'Jane'.
--->db.student.updateMany({name:'Jane'},{$set:{isActive:true}})

16. Update isActive field of 'Lucy' to false.
--->db.student.updateMany({name:'Lucy'},{$set:{isActive:false}})

17. Delete a document of 'Nick' from the collection.
--->db.student.deleteOne({name:'Nick'})

18. Delete all students who are inactive (isActive = false).
--->db.student.deleteMany({isActive:false})

19. Delete all students who live in 'New York'.
--->db.student.deleteMany({city:'New York'})


20. Delete all the students aged above 35
--->db.student.deleteMany({age:{$gt:35}})

21. Delete a student named ''Olivia'' from the collection.
--->db.student.deleteOne({name:'Olivia'})

22. Delete all the students whose age is below 25.
--->db.student.deleteMany({age:{$lt:25}})

23. Delete the first student whose isActive field is true.
--->db.student.deleteOne({isActive:true})

24. Delete all students from 'Los Angeles'.
--->db.student.deleteMany({city:'Los Angeles'})

25. Delete all students who have city field missing.
--->db.student.deleteMany({city:''})

26. Rename 'city' field to 'location' for all documents.
--->db.student.updateMany({},{$rename:{city:'location'}})

27. Rename the name field to FullName for 'John'.
--->db.student.updateMany({name:'John'},{$rename:{name:'FullName'}})

28. Rename the isActive field to status for all documents.
--->db.student.updateMany({},{$rename:{isActive:'status'}})

29. Rename age to yearsOld for everyone from 'San Francisco' student 
only.
---> db.student.updateMany({city:'SanFrancisco'},{$rename:{age:'yearsOld'}})

30. Create a Capped Collection named “Employee” as per follows:
a. Ecode and Ename are compulsory fields
b. Datatype of EID is int, Ename is string, Age is int and City is string
Insert following documents into above “Employee” collection.
---> db.createCollection("Employee", {capped: true, size: 10485760,
  validator: {                         
    $jsonSchema: {
      bsonType: "object",
      required: ["Ecode", "Ename"],  
      properties: {
        Ecode: {
          bsonType: "int",            
          description: "Ecode must be an integer and is required"
        },
        Ename: {
          bsonType: "string",         
          description: "Ename must be a string and is required"
        },
        Age: {
          bsonType: "int",             
          description: "Age must be an integer"
        },
        City: {
          bsonType: "string",         
          description: "City must be a string"
        }
      }
    }
  }
});