1. Create an index on the company field in the stocks collection. 
db.Stock.createIndex({company: 1})

2. Create a compound index on the sector and sales fields in the stocks collection. 
db.Stock.createIndexes([{sector: 1}, {sales: 1}])

3. List all the indexes created on the stocks collection. 
db.Stock.getIndexes()

4. Drop an existing index on the company field from the stocks collection. 
db.Stock.dropIndex({company: 1})

5. Use a cursor to retrieve and iterate over documents in the stocks collection, displaying each document. 
var cursor_5 = db.Stock.find()
cursor_5

6. Limit the number of documents returned by a cursor to the first 3 documents in the stocks collection.
var cursor_6 = db.Stock.find().limit(3)
cursor_6
 
7. Sort the documents returned by a cursor in descending order based on the sales field. 
var cursor_7 = db.Stock.find().sort({sales: -1})
cursor_7

8. Skip the first 2 documents in the result set and return the next documents using the cursor. 
var cursor_8 = db.Stock.find().skip(2)
cursor_8

9. Convert the cursor to an array and return all documents from the stocks collection. 
var cursor_9 = db.Stock.find().toArray()
cursor_9

10. Create a collection named "Companies" with schema validation to ensure that each document must contains a company field (string) and a sector field (string).
db.createCollection('Companies',{
validator: { 
$jsonSchema: { 
bsonType: 'object', 
required: ['company', 'sector'], 
properties: {
	company: {bsonType: 'string'}, 
	sector: {bsonType: 'string'}
	}}}})

11. Create a collection named "Scripts" with validation for fields like eps, pe, and roe to ensure that they are numbers and required/compulsory fields. 
db.createCollection('Scripts',{
validator: { 
$jsonSchema: { 
bsonType: 'object', 
required: ['eps', 'pe', 'roe'], 
properties: {
	eps: {bsonType: 'number'}, 
	pe: {bsonType: 'number'},
	roe: {bsonType: 'number'}
	}}}})

12. Create a collection named "Products" where each product has an embedded document for manufacturer details and a multivalued field for categories that stores an array of category names the product belongs to. 
 manufacturer details: The manufacturer will be an embedded document with fields like name, country, and establishedYear. 
 categories: The categories will be an array field that holds multiple values. (i.e. Electronics, Mobile, Smart Devices).
db.createCollection('Products',{
validator: { 
$jsonSchema: { 
bsonType: 'object', 
required: ['manufacturer_details', 'categories'], 
properties: {
	manufacturer_details: {bsonType: 'number', required: ['name', 'country', 'establishedYear']}, 
	categories: {bsonType: 'number', required: ['Electronics', 'Mobile', 'SmartDevices']},
	}}}})

13. Create a collection named “financial_Reports” that requires revenue (a positive number) but allows optional fields like expenses and netIncome (if provided, they should also be numbers). 
db.createCollection('financial_Reports',{
validator: { 
$jsonSchema: { 
bsonType: 'object', 
required: ['revenue'], 
properties: {
	revenue: {bsonType: 'number'}, 
	expenses: {bsonType: 'number'},
	netIncome: {bsonType: 'number'}
	}}}})
